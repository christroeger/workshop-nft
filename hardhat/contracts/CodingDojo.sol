// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

import "@openzeppelin/contracts/utils/Strings.sol";
import "hardhat/console.sol";

contract CodingDojo {

    struct MyFuckinNft {
        address owner;
        string uri;
    }

    using Strings for uint256;

    // Token Contract name
    string private _name;

    // Token Contract symbol
    string private _symbol;

    uint256 private _totalCount;

    mapping(uint256 => MyFuckinNft) private _nfts;

    mapping(address => uint256) private _nftCount;

    constructor() {
        _name = "CodingDojo";
        _symbol = "CD";
    }

    /// @notice A descriptive name for a collection of NFTs in this contract
    function name() external view returns (string memory) {
        return _name;
    }

    /// @notice An abbreviated name for NFTs in this contract
    function symbol() external view returns (string memory) {
        return _symbol;
    }

    /// @notice Count NFTs tracked by this contract
    /// @return A count of valid NFTs tracked by this contract, where each one of
    ///  them has an assigned and queryable owner not equal to the zero address
    function totalSupply() external view returns (uint256) {
        return _totalCount;
    }

    /// @notice Count all NFTs assigned to an owner
    /// @dev NFTs assigned to the zero address are considered invalid, and this
    ///  function throws for queries about the zero address.
    /// @param _owner An address for whom to query the balance
    /// @return The number of NFTs owned by `_owner`, possibly zero
    function balanceOf(address _owner) external view returns (uint256) {
        return _nftCount[_owner];
    }

    /// @notice Find the owner of an NFT
    /// @dev NFTs assigned to zero address are considered invalid, and queries
    ///  about them do throw.
    /// @param _tokenId The identifier for an NFT
    /// @return The address of the owner of the NFT
    function ownerOf(uint256 _tokenId) external view returns (address) {
        return _nfts[_tokenId].owner;
    }

    /// @notice Calls internal function _mint and _setTokenURI and increments _tokenCounter
    /// @dev Throws if `_to` is the zero address
    /// @param _to The new Owner of that token
    /// @param _uri Any string - hash generated by web3.storage
    function safeMint(address _to, string memory _uri) external {
        require(_to != address(0), "zero address");
        uint256 tokenId = _totalCount;
        _mint(_to, tokenId);
        _setTokenURI(tokenId, _uri);
        ++_totalCount;
    }

    /// @notice Mints the _tokenId for address _to
    /// @dev Throws if `tokenId` is already used
    /// @param _to The new Owner of that token
    /// @param _tokenId A number that is NOT connected to an address
    function _mint(address _to, uint256 _tokenId) internal {
        _nfts[_tokenId].owner = _to;
        _nftCount[_to]++;
    }

    /// @notice Mints the _tokenId for address _to
    /// @dev Throws if `tokenId` is NOT used
    /// @param _tokenId A number that is connected to an address
    /// @param _uri Any string
    function _setTokenURI(uint256 _tokenId, string memory _uri) internal {
        _nfts[_tokenId].uri = string.concat("ipfs://", _uri);
    }

    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.
    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC
    ///  3986. The URI may point to a JSON file that conforms to the "ERC721
    ///  Metadata JSON Schema".
    function tokenURI(uint256 _tokenId) external view returns (string memory) {
        return _nfts[_tokenId].uri;
    }

    // Optional enhanced nft logic

    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
    ///  THEY MAY BE PERMANENTLY LOST
    /// @dev Throws unless `msg.sender` is the current owner, an authorized
    ///  operator, or the approved address for this NFT. Throws if `_from` is
    ///  not the current owner. Throws if `_to` is the zero address. Throws if
    ///  `_tokenId` is not a valid NFT.
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer
    function transferFrom(address _from, address _to, uint256 _tokenId) external payable {
        require(_from != address(0), "from zero address");
        require(_to != address(0), "to zero address");
        require(_nfts[_tokenId].owner == _from, 'owner mismatch');
        require(msg.sender == _from, 'message sender does not match owner');
        _nfts[_tokenId].owner = _to;
        _nftCount[_from]--;
        _nftCount[_to]++;
    }

    /// @notice Enumerate valid NFTs
    /// @dev Throws if `_index` >= `totalSupply()`.
    /// @param _index A counter less than `totalSupply()`
    /// @return The token identifier for the `_index`th NFT,
    ///  (sort order not specified)
    function tokenByIndex(uint256 _index) external view returns (uint256) {
        require(_index + 1 < _totalCount, 'index out of range');
        return _index + 1;
    }

    /// @notice Enumerate NFTs assigned to an owner
    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if
    ///  `_owner` is the zero address, representing invalid NFTs.
    /// @param _owner An address where we are interested in NFTs owned by them
    /// @param _index A counter less than `balanceOf(_owner)`
    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,
    ///   (sort order not specified)
    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {
        require(_index < _nftCount[_owner], 'index out of range');
        uint256 tokenId;
        uint256 currentIdx;
        bool found = false;
        for (uint256 i = 0; i < _totalCount; ++i) {
            if (_nfts[i].owner == _owner) {
                if (currentIdx == _index) {
                    found = true;
                    tokenId = i;
                }
                currentIdx++;
            }
        }
        require(found, 'token not found');
        return tokenId;
    }
}
